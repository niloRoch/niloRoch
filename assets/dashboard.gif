<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cyberpunk Dashboard</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: #0a0a0a;
            font-family: 'Orbitron', monospace;
            color: #00ff41;
            overflow: hidden;
            height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .container {
            display: grid;
            grid-template-columns: 2fr 1fr;
            grid-template-rows: auto auto 1fr;
            gap: 15px;
            padding: 20px;
            height: 100vh;
            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 100%);
        }

        .panel {
            background: rgba(0, 20, 40, 0.8);
            border: 1px solid #00ff41;
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 0 20px rgba(0, 255, 65, 0.3);
            backdrop-filter: blur(10px);
        }

        .panel-title {
            color: #00ff41;
            font-weight: 700;
            font-size: 12px;
            margin-bottom: 10px;
            text-transform: uppercase;
            letter-spacing: 1px;
            border-bottom: 1px solid #00ff41;
            padding-bottom: 5px;
        }

        .main-chart {
            grid-column: 1;
            grid-row: 1 / 3;
            position: relative;
        }

        .progress-panel {
            grid-column: 2;
            grid-row: 1;
        }

        .time-panel {
            grid-column: 2;
            grid-row: 2;
            text-align: center;
        }

        .bottom-panels {
            grid-column: 1 / 3;
            grid-row: 3;
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 15px;
        }

        .progress-bar {
            margin: 8px 0;
            display: flex;
            align-items: center;
            font-size: 10px;
        }

        .progress-label {
            width: 120px;
            color: #00ff41;
            font-weight: 400;
        }

        .progress-track {
            flex: 1;
            height: 6px;
            background: rgba(0, 255, 65, 0.1);
            margin: 0 10px;
            border-radius: 3px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #00ff41, #00ccff);
            transition: width 0.3s ease;
            box-shadow: 0 0 10px rgba(0, 255, 65, 0.6);
        }

        .progress-value {
            color: #00ccff;
            font-weight: 700;
            min-width: 60px;
            text-align: right;
        }

        .time-display {
            font-size: 48px;
            font-weight: 900;
            color: #00ff41;
            text-shadow: 0 0 20px rgba(0, 255, 65, 0.8);
            letter-spacing: 2px;
            margin: 20px 0;
            font-family: 'Orbitron', monospace;
        }

        .chart-container {
            height: 200px;
            position: relative;
            margin: 20px 0;
        }

        .chart-line {
            position: absolute;
            bottom: 0;
            width: 2px;
            background: linear-gradient(to top, #00ff41, #00ccff);
            animation: pulse 2s infinite;
            box-shadow: 0 0 5px rgba(0, 255, 65, 0.8);
        }

        .metric-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
            margin-top: 10px;
        }

        .metric-item {
            display: flex;
            justify-content: space-between;
            font-size: 11px;
            padding: 5px 0;
            border-bottom: 1px solid rgba(0, 255, 65, 0.2);
        }

        .metric-label {
            color: #00ff41;
        }

        .metric-value {
            color: #00ccff;
            font-weight: 700;
        }

        .weather-item {
            text-align: center;
            font-size: 11px;
        }

        .weather-temp {
            font-size: 18px;
            font-weight: 700;
            color: #00ccff;
            margin: 5px 0;
        }

        .weather-desc {
            color: #00ff41;
            margin-bottom: 5px;
        }

        .weather-details {
            color: #888;
            font-size: 9px;
        }

        .status-bar {
            display: flex;
            justify-content: space-between;
            font-size: 10px;
            color: #888;
            margin-top: 10px;
        }

        .alert {
            background: rgba(255, 0, 0, 0.1);
            border: 1px solid #ff0040;
            color: #ff0040;
            padding: 8px;
            border-radius: 4px;
            font-size: 11px;
            margin-top: 10px;
            animation: blink 1s infinite;
        }

        @keyframes pulse {
            0% { opacity: 0.6; }
            50% { opacity: 1; }
            100% { opacity: 0.6; }
        }

        @keyframes blink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0.5; }
        }

        .processing-indicator {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: #00ff41;
            animation: pulse 1s infinite;
            margin-left: 5px;
        }

        .data-flow {
            height: 80px;
            position: relative;
            overflow: hidden;
            margin: 10px 0;
        }

        .flow-line {
            position: absolute;
            width: 100%;
            height: 1px;
            background: linear-gradient(90deg, transparent, #00ff41, transparent);
            animation: flow 3s linear infinite;
        }

        @keyframes flow {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Main Chart Panel -->
        <div class="panel main-chart">
            <div class="panel-title">System Performance Monitor</div>
            <div class="chart-container" id="mainChart"></div>
            <div class="metric-grid">
                <div class="metric-item">
                    <span class="metric-label">CPU CORES</span>
                    <span class="metric-value" id="cpuCores">8</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">THREADS</span>
                    <span class="metric-value" id="threads">16</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">UPTIME</span>
                    <span class="metric-value" id="uptime">72h 15m</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">TEMP</span>
                    <span class="metric-value" id="temperature">65¬∞C</span>
                </div>
            </div>
            <div class="alert">
                ‚ö† LATENCY THRESHOLD EXCEEDED - GOOGLE: 0.712sec
            </div>
        </div>

        <!-- Progress Panel -->
        <div class="panel progress-panel">
            <div class="panel-title">Time Progress</div>
            <div class="progress-bar">
                <span class="progress-label">YEAR PROGRESS</span>
                <div class="progress-track">
                    <div class="progress-fill" id="yearProgress" style="width: 0%"></div>
                </div>
                <span class="progress-value" id="yearPercent">0%</span>
            </div>
            <div class="progress-bar">
                <span class="progress-label">DAY PROGRESS</span>
                <div class="progress-track">
                    <div class="progress-fill" id="dayProgress" style="width: 0%"></div>
                </div>
                <span class="progress-value" id="dayPercent">0%</span>
            </div>
            <div class="progress-bar">
                <span class="progress-label">HOUR PROGRESS</span>
                <div class="progress-track">
                    <div class="progress-fill" id="hourProgress" style="width: 0%"></div>
                </div>
                <span class="progress-value" id="hourPercent">0%</span>
            </div>
            <div class="progress-bar">
                <span class="progress-label">MINUTE PROGRESS</span>
                <div class="progress-track">
                    <div class="progress-fill" id="minuteProgress" style="width: 0%"></div>
                </div>
                <span class="progress-value" id="minutePercent">0%</span>
            </div>
        </div>

        <!-- Time Panel -->
        <div class="panel time-panel">
            <div class="panel-title">UTC Time</div>
            <div class="time-display" id="utcTime">00:00:00</div>
            <div class="status-bar">
                <span>TIMEZONE: UTC+0</span>
                <span>SYNC: ‚úì</span>
            </div>
        </div>

        <!-- Bottom Panels -->
        <div class="bottom-panels">
            <!-- Weather Panel -->
            <div class="panel">
                <div class="panel-title">üå°Ô∏è Climate Status</div>
                <div class="metric-grid">
                    <div class="weather-item">
                        <div class="weather-desc">‚òÄÔ∏è Local</div>
                        <div class="weather-temp">22¬∞C</div>
                        <div class="weather-details">Clear ‚Ä¢ 5 mph</div>
                    </div>
                    <div class="weather-item">
                        <div class="weather-desc">‚õÖ Amsterdam</div>
                        <div class="weather-temp">18¬∞C</div>
                        <div class="weather-details">Cloudy ‚Ä¢ 8 mph</div>
                    </div>
                </div>
            </div>

            <!-- System Resources -->
            <div class="panel">
                <div class="panel-title">‚ö° System Resources</div>
                <div class="progress-bar">
                    <span class="progress-label">üìä RAM USAGE</span>
                    <div class="progress-track">
                        <div class="progress-fill" id="ramUsage" style="width: 68%"></div>
                    </div>
                    <span class="progress-value" id="ramPercent">68%</span>
                </div>
                <div class="progress-bar">
                    <span class="progress-label">üî• CPU USAGE</span>
                    <div class="progress-track">
                        <div class="progress-fill" id="cpuUsage" style="width: 45%"></div>
                    </div>
                    <span class="progress-value" id="cpuPercent">45%</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">üíæ MEMORY</span>
                    <span class="metric-value">12.4GB / 32GB</span>
                </div>
            </div>

            <!-- Database Stats -->
            <div class="panel">
                <div class="panel-title">üçÉ Database Status</div>
                <div class="metric-item">
                    <span class="metric-label">üìÑ DOCUMENTS</span>
                    <span class="metric-value" id="mongoCount">847,293</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">üìÅ COLLECTIONS</span>
                    <span class="metric-value">24</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">üíΩ SIZE</span>
                    <span class="metric-value">2.8GB</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">‚ö° STATUS</span>
                    <span class="metric-value">ACTIVE <span class="processing-indicator"></span></span>
                </div>
            </div>

            <!-- Kafka & Processing -->
            <div class="panel">
                <div class="panel-title">üöÄ Data Pipeline</div>
                <div class="metric-item">
                    <span class="metric-label">üì° KAFKA QUEUE</span>
                    <span class="metric-value" id="kafkaInflight">1,247</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">‚ö° PROCESSED/SEC</span>
                    <span class="metric-value" id="processedPerSec">523</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">üì¶ BACKLOG</span>
                    <span class="metric-value" id="queueSize">89</span>
                </div>
                <div class="data-flow">
                    <div class="flow-line" style="top: 20px;"></div>
                    <div class="flow-line" style="top: 40px; animation-delay: 1s;"></div>
                    <div class="flow-line" style="top: 60px; animation-delay: 2s;"></div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Real-time updates
        function updateTime() {
            const now = new Date();
            const utc = new Date(now.getTime() + (now.getTimezoneOffset() * 60000));
            
            // UTC Time
            document.getElementById('utcTime').textContent = utc.toTimeString().split(' ')[0];
            
            // Progress calculations
            const startOfYear = new Date(utc.getFullYear(), 0, 1);
            const endOfYear = new Date(utc.getFullYear() + 1, 0, 1);
            const yearProgress = ((utc - startOfYear) / (endOfYear - startOfYear)) * 100;
            
            const startOfDay = new Date(utc.getFullYear(), utc.getMonth(), utc.getDate());
            const dayProgress = ((utc - startOfDay) / (24 * 60 * 60 * 1000)) * 100;
            
            const startOfHour = new Date(utc.getFullYear(), utc.getMonth(), utc.getDate(), utc.getHours());
            const hourProgress = ((utc - startOfHour) / (60 * 60 * 1000)) * 100;
            
            const startOfMinute = new Date(utc.getFullYear(), utc.getMonth(), utc.getDate(), utc.getHours(), utc.getMinutes());
            const minuteProgress = ((utc - startOfMinute) / (60 * 1000)) * 100;
            
            // Update progress bars
            updateProgress('year', yearProgress);
            updateProgress('day', dayProgress);
            updateProgress('hour', hourProgress);
            updateProgress('minute', minuteProgress);
        }

        function updateProgress(type, value) {
            document.getElementById(type + 'Progress').style.width = value + '%';
            document.getElementById(type + 'Percent').textContent = value.toFixed(1) + '%';
        }

        function updateMetrics() {
            // Simulate real-time data changes
            const ramUsage = 65 + Math.random() * 10;
            const cpuUsage = 40 + Math.random() * 20;
            const mongoCount = 847293 + Math.floor(Math.random() * 1000);
            const kafkaInflight = 1200 + Math.floor(Math.random() * 200);
            const processedPerSec = 500 + Math.floor(Math.random() * 50);
            const queueSize = 80 + Math.floor(Math.random() * 20);

            document.getElementById('ramUsage').style.width = ramUsage + '%';
            document.getElementById('ramPercent').textContent = ramUsage.toFixed(0) + '%';
            document.getElementById('cpuUsage').style.width = cpuUsage + '%';
            document.getElementById('cpuPercent').textContent = cpuUsage.toFixed(0) + '%';
            document.getElementById('mongoCount').textContent = mongoCount.toLocaleString();
            document.getElementById('kafkaInflight').textContent = kafkaInflight.toLocaleString();
            document.getElementById('processedPerSec').textContent = processedPerSec;
            document.getElementById('queueSize').textContent = queueSize;
        }

        function createChart() {
            const chart = document.getElementById('mainChart');
            chart.innerHTML = '';
            
            for (let i = 0; i < 100; i++) {
                const line = document.createElement('div');
                line.className = 'chart-line';
                line.style.left = i * 2 + 'px';
                line.style.height = Math.random() * 180 + 20 + 'px';
                line.style.animationDelay = Math.random() * 2 + 's';
                chart.appendChild(line);
            }
        }

        // Initialize
        createMatrixRain();
        updateTime();
        updateMetrics();
        createChart();

        // Update intervals
        setInterval(updateTime, 1000);
        setInterval(updateMetrics, 2000);
        setInterval(createChart, 5000);
        setInterval(animateCores, 3000);
    </script>
</body>
</html>
